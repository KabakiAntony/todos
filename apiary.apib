FORMAT: 1A
HOST: https://ka-todos.herokuapp.com/

# Todos

Todos is a simple  todos app that allows one to create a user account,
from there on you will be able to manage your todos with your user account.

## Signup Users [/users/signup]

### Register User [POST]

A user will be able to register for an account so that they can create, view,
delete, edit/update todos.

+ Request (application/json)

    + Body

            {
                "email": "todos@mailpoof.com",
                "password": "rainsunshinechairdesk"
            }

+ Response 201 (application/json)

        {
            "data": "User created successfully"
        }
        
        
## Signin Users [/users/signin]

### User Signin [POST]

You may signin into the app it takes a user json object that has email
and password.

+ Request (application/json)

    + Body

            {
                "email": "todos@mailpoof.com",
                "password": "rainsunshinechairdesk"
            }

+ Response 200 (application/json)

    + Body
    
            {
                "data": 
                {
                    "auth_token": "usethetokengottenfromhereonotherroutes",
                    "message": "Signed in successfully preparing your dashboard..."
                }
            }


## Update password [/users/update-password]

### Change user password [PUT]

A user will be able to set a new password for their account, be it an occassional
change or whether they have forgotten it.

+ Request (application/json)
    
   + Body

            {
                "email": "todos@mailpoof.com",
                "password": "thisisanewpassword"
            }

    
    + Headers

            auth-token: "sometokengotfromresetemail"
    
+ Response 200 (application/json)

    + Body
    
            {
                "data": "Your password has been changed successfully."
            }

## Todos Collection [/todos]

### Create a todo [POST]

A signed in user will be able to create a new todo.

+ Request (application/json)
    
   + Body

            {
                "todo": "This is the first todo",
            }

    
    + Headers

            auth-token: "somettokengottenfromsigningin"
    
+ Response 201 (application/json)

    + Body
    
               {
                    "data": "New todo created successfully."
                }


### Get user todos [GET]

A signed in user will be able to view all their todos.

+ Request (application/json)
    
    + Headers

            auth-token: "somettokengottenfromsigningin"
    
+ Response 200 (application/json)

    + Body
    
            {
                "data": [
                        {
                            "creation_date": "2021-11-06",
                            "id": 1,
                            "todo": "This is the first todo",
                            "user_id": "Iki4YEoBvF"
                        }
                        ]
            }

## Specific todo [/todos/{id}]

    + Parameters
        + id (number) - ID of the todo in the form of an integer

### Get a given todo for a signed user [GET]

A signed in user will be able to get a specific todo by supplying it's id

+ Request (application/json)
    
    + Headers

            auth-token: "somettokengottenfromsigningin"
    
+ Response 200 (application/json)

    + Body
    
            {
                "data": [
                        {
                            "creation_date": "2021-11-06",
                            "id": 1,
                            "todo": "This is the first todo",
                            "user_id": "Iki4YEoBvF"
                        }
                        ]
            }


### Update a specific todo for a signed in user [PUT]

A signed in user will be able to update a specific todo by supplying it's id

+ Request (application/json)

    + Body

            {
                "todo": "This is an update"
            }
    
    + Headers

            auth-token: "somettokengottenfromsigningin"
    
+ Response 200 (application/json)

    + Body
    
            {
                "data": "Todo updated successfully."
            }


### Delete a todo for a signed in user [DELETE]

A signed in user will be able to DELETE a specific todo by supplying it's id

+ Request (application/json)

    + Headers

            auth-token: "somettokengottenfromsigningin"
    
+ Response 200 (application/json)

    + Body
    
            {
                "data": "Todo deleted successfully."
            }